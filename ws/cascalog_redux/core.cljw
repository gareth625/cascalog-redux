;; gorilla-repl.fileformat = 1

;; **
;;; # Cascalog-Redux
;;; 
;;; A Gorilla REPL worksheet that we can use to sketch out the solution to the problems. Start with the namespace declaration and library includes, then define the data sets for convenience and then get going :)
;; **

;; @@
(ns cascalog-redux.core-ws
  (:require [cascalog.api :refer :all]
            [cascalog.logic.ops :as c]
            [cascalog-redux.taps :as bike-trip-data]
            [clj-time.core :as t] :reload-all))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; **
;;; The sample file should contain on a few tens of lines so we can easily check transforms without overwhelm with the repl with printout. Can start streaming to file when we're ready.
;; **

;; @@
(def bike-trip-data-sample
  "data/bike_trip_data_sample.csv")

;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;cascalog-redux.core-ws/bike-trip-data-sample</span>","value":"#'cascalog-redux.core-ws/bike-trip-data-sample"}
;; <=

;; **
;;; This is the full data sets. 16MB, 144,015 rows.
;; **

;; @@
(def bike-trip-data-full
  "data/bike_trip_data.csv")
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;cascalog-redux.core-ws/bike-trip-data-full</span>","value":"#'cascalog-redux.core-ws/bike-trip-data-full"}
;; <=

;; @@
(defn stream-file-to-stdout
  "Streams the input bike trip data file to stdout. You probably don't want to stream the whole file ;)"
  [input & args]
  (let [bad-rows-sink (hfs-textline "br")]
    (?- (bike-trip-data/out-sink "stdout")
        (bike-trip-data/bike-trip-data input bad-rows-sink)
        (:trap bad-rows-sink))))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;cascalog-redux.core-ws/stream-file-to-stdout</span>","value":"#'cascalog-redux.core-ws/stream-file-to-stdout"}
;; <=

;; **
;;; Running the above function on the sample data streams it straight to the stdout. Perhaps usefully the output (there's plenty of guff) remains in the lein gorilla terminal.
;; **

;; @@
(stream-file-to-stdout bike-trip-data-sample)
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; @@
(defn stream-file
  "Streams the input bike trip data file to stdout. You probably don't want to stream the whole file ;)"
  [input output & args]
  (let [dest (bike-trip-data/out-sink output)
        bad-rows-sink (hfs-textline "br")]
    (?- dest
        (bike-trip-data/bike-trip-data input bad-rows-sink)
        (:trap bad-rows-sink))))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;cascalog-redux.core-ws/stream-file</span>","value":"#'cascalog-redux.core-ws/stream-file"}
;; <=

;; @@
(stream-file bike-trip-data-sample "stdout")
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; @@
(stream-file bike-trip-data-full "dest5")
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; @@
(defn get-interval
  [t1 t2]
  (if (t/before? t1 t2)
    (t/interval t1 t2)
    (t/interval t2 t1)))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;cascalog-redux.core-ws/get-interval</span>","value":"#'cascalog-redux.core-ws/get-interval"}
;; <=

;; @@
(defn problem-1
  [input output]
  (let [dest (bike-trip-data/out-sink output)
        br-sink (hfs-textline "br")
        trip-data (bike-trip-data/bike-trip-data input br-sink)]
    (?<- dest
         [?avg_trip_duration_minutes]
         
         (trip-data :>> bike-trip-data/bike-trip-data-fields)

         (get-interval !start_date !end_date :> ?trip_duration)
         (t/in-minutes ?trip_duration :> ?trip_duration_minutes)
         
         (c/avg ?trip_duration_minutes :> ?avg_trip_duration_minutes)
         
         
         (:trap br-sink))))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;cascalog-redux.core-ws/problem-1</span>","value":"#'cascalog-redux.core-ws/problem-1"}
;; <=

;; @@
(problem-1 bike-trip-data-sample "stdout")
;; @@

;; @@
(problem-1 bike-trip-data-full "dest6")
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; @@
(defn problem-1-hist
  [input output]
  (let [dest (bike-trip-data/out-sink output)
        br-sink (hfs-textline "br")
        trip-data (bike-trip-data/bike-trip-data input br-sink)]
    (?<- dest
         [?trip_duration_minutes  ?total]
         
         (trip-data :>> bike-trip-data/bike-trip-data-fields)

         (get-interval !start_date !end_date :> ?trip_duration)
         (t/in-minutes ?trip_duration :> ?trip_duration_minutes)
         
         (c/count ?count)
         (c/sum ?trip_duration_minutes :> ?total)
         
         
         (:trap br-sink))))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;cascalog-redux.core-ws/problem-1-hist</span>","value":"#'cascalog-redux.core-ws/problem-1-hist"}
;; <=

;; @@
(problem-1-hist bike-trip-data-sample "stdout")
;; @@

;; @@
(problem-1-hist bike-trip-data-full "stdout")
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; @@
(?<- (stdout)
     [?avg]
     
     ([[1] [3]] :> ?x)
     (c/avg ?x :> ?avg)
     )
;; @@

;; @@

;; @@
